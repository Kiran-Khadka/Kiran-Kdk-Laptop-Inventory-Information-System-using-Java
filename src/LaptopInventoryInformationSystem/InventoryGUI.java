/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package LaptopInventoryInformationSystem;

/**
 *
 * @author Group 1 (Abhiyan, Bajra, Kiran, Subigyan -L2C16)
 */
import javax.swing.JOptionPane;
import java.io.BufferedReader;
import java.awt.Desktop;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;
import javax.swing.table.DefaultTableModel;
import java.util.logging.Logger;
import java.util.logging.Level;

public class InventoryGUI extends javax.swing.JFrame {

    /**
     * Creates new form InventoryGUI
     */
    DefaultTableModel objModel;
    boolean tableisSorted; // declare

    public InventoryGUI() {
        initComponents();

        table_Inventory.getColumnModel().getColumn(0).setPreferredWidth(100);
        table_Inventory.getColumnModel().getColumn(1).setPreferredWidth(125);
        table_Inventory.getColumnModel().getColumn(3).setPreferredWidth(125);
        table_Inventory.getColumnModel().getColumn(4).setPreferredWidth(130);
        table_Inventory.getColumnModel().getColumn(11).setPreferredWidth(125);
        table_Inventory.setShowGrid(true);
        objModel = (DefaultTableModel) table_Inventory.getModel();
        objModel.setRowCount(0);
        method_Open();
        tableisSorted = false;

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel_Search = new javax.swing.JPanel();
        lbl_SebyBrand = new javax.swing.JLabel();
        lbl_SebyPrice = new javax.swing.JLabel();
        lbl_SebyRAM = new javax.swing.JLabel();
        cb_SebyBrand = new javax.swing.JComboBox<>();
        cb_SebyRAM = new javax.swing.JComboBox<>();
        txt_SebyPrice = new javax.swing.JTextField();
        btn_SearchPrice = new javax.swing.JButton();
        panel_Table = new javax.swing.JPanel();
        btn_Remove = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        table_Inventory = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        btn_SortbyID = new javax.swing.JButton();
        btn_SortbyPrice = new javax.swing.JButton();
        btn_Home = new javax.swing.JButton();
        btn_back = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        menu_File = new javax.swing.JMenu();
        new_MenuItem = new javax.swing.JMenuItem();
        menuItem_Open = new javax.swing.JMenuItem();
        menuItem_Save = new javax.swing.JMenuItem();
        menuItem_Exit = new javax.swing.JMenuItem();
        edit_Menu = new javax.swing.JMenu();
        menuItem_Redo = new javax.swing.JMenuItem();
        menuItem_Undo = new javax.swing.JMenuItem();
        menuItem_Cut = new javax.swing.JMenuItem();
        menuItem_Copy = new javax.swing.JMenuItem();
        menuItem_Paste = new javax.swing.JMenuItem();
        menu_About = new javax.swing.JMenu();
        menuItem_About = new javax.swing.JMenuItem();
        menu_Help = new javax.swing.JMenu();
        menuItem_Manual = new javax.swing.JMenuItem();
        menuItem_Faq = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Laptop Inventory Information System | View 11.11");
        setBackground(new java.awt.Color(18, 31, 40));
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setName("frame3"); // NOI18N
        setSize(new java.awt.Dimension(0, 0));

        panel_Search.setBackground(new java.awt.Color(11, 103, 142));
        panel_Search.setForeground(new java.awt.Color(204, 204, 204));

        lbl_SebyBrand.setFont(new java.awt.Font("Calisto MT", 0, 18)); // NOI18N
        lbl_SebyBrand.setForeground(new java.awt.Color(204, 204, 204));
        lbl_SebyBrand.setText("Search by Brand:");

        lbl_SebyPrice.setFont(new java.awt.Font("Calisto MT", 0, 18)); // NOI18N
        lbl_SebyPrice.setForeground(new java.awt.Color(204, 204, 204));
        lbl_SebyPrice.setText("Search by Price:");

        lbl_SebyRAM.setFont(new java.awt.Font("Calisto MT", 0, 18)); // NOI18N
        lbl_SebyRAM.setForeground(new java.awt.Color(204, 204, 204));
        lbl_SebyRAM.setText("Search by RAM:");

        cb_SebyBrand.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Here", "Acer", "Apple", "Asus", "Dell", "HP", "Lenovo", "MSI", "Razerblade" }));
        cb_SebyBrand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_SebyBrandActionPerformed(evt);
            }
        });

        cb_SebyRAM.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Here", "4 GB", "8 GB", "16 GB", "32 GB" }));
        cb_SebyRAM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_SebyRAMActionPerformed(evt);
            }
        });

        txt_SebyPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_SebyPriceKeyPressed(evt);
            }
        });

        btn_SearchPrice.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        btn_SearchPrice.setText("Search");
        btn_SearchPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_SearchPriceActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panel_SearchLayout = new javax.swing.GroupLayout(panel_Search);
        panel_Search.setLayout(panel_SearchLayout);
        panel_SearchLayout.setHorizontalGroup(
            panel_SearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_SearchLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(panel_SearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl_SebyPrice, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_SebyBrand))
                .addGap(18, 18, 18)
                .addGroup(panel_SearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_SearchLayout.createSequentialGroup()
                        .addComponent(cb_SebyBrand, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 229, Short.MAX_VALUE)
                        .addComponent(lbl_SebyRAM)
                        .addGap(28, 28, 28)
                        .addComponent(cb_SebyRAM, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panel_SearchLayout.createSequentialGroup()
                        .addComponent(txt_SebyPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btn_SearchPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(66, 66, 66))
        );
        panel_SearchLayout.setVerticalGroup(
            panel_SearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_SearchLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_SearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_SearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lbl_SebyBrand, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cb_SebyBrand, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lbl_SebyRAM, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(cb_SebyRAM, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 18, Short.MAX_VALUE)
                .addGroup(panel_SearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_SebyPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_SebyPrice)
                    .addComponent(btn_SearchPrice))
                .addGap(12, 12, 12))
        );

        panel_Table.setBackground(new java.awt.Color(245, 178, 83));

        btn_Remove.setBackground(new java.awt.Color(250, 42, 65));
        btn_Remove.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        btn_Remove.setForeground(new java.awt.Color(255, 255, 255));
        btn_Remove.setText("Remove");
        btn_Remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_RemoveActionPerformed(evt);
            }
        });

        table_Inventory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Laptop ID", "Manufacturer", "Type", "Model Name", "Model Number", "CPU", "GPU", "Display", "Memory", "Storage", "Price ", "Price Range", "Rating"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table_Inventory.setToolTipText("You can resize the gui or columns to view the complete data.");
        table_Inventory.setGridColor(new java.awt.Color(204, 204, 204));
        table_Inventory.setPreferredSize(new java.awt.Dimension(990, 900));
        table_Inventory.setRowHeight(30);
        table_Inventory.setRowMargin(9);
        table_Inventory.setShowGrid(true);
        table_Inventory.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(table_Inventory);

        javax.swing.GroupLayout panel_TableLayout = new javax.swing.GroupLayout(panel_Table);
        panel_Table.setLayout(panel_TableLayout);
        panel_TableLayout.setHorizontalGroup(
            panel_TableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 833, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_TableLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btn_Remove, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(59, 59, 59))
        );
        panel_TableLayout.setVerticalGroup(
            panel_TableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_TableLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btn_Remove, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel1.setFont(new java.awt.Font("Arial", 0, 30)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 102, 0));
        jLabel1.setText("Laptop Inventory Information System");

        btn_SortbyID.setBackground(new java.awt.Color(78, 125, 150));
        btn_SortbyID.setFont(new java.awt.Font("Arial", 0, 17)); // NOI18N
        btn_SortbyID.setForeground(new java.awt.Color(255, 255, 255));
        btn_SortbyID.setText("Sort by ID");
        btn_SortbyID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_SortbyIDActionPerformed(evt);
            }
        });

        btn_SortbyPrice.setBackground(new java.awt.Color(78, 125, 150));
        btn_SortbyPrice.setFont(new java.awt.Font("Arial", 0, 17)); // NOI18N
        btn_SortbyPrice.setForeground(new java.awt.Color(255, 255, 255));
        btn_SortbyPrice.setText("Sort by Price");
        btn_SortbyPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_SortbyPriceActionPerformed(evt);
            }
        });

        btn_Home.setBackground(new java.awt.Color(0, 137, 214));
        btn_Home.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        btn_Home.setForeground(new java.awt.Color(255, 255, 255));
        btn_Home.setText("Home");
        btn_Home.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_HomeActionPerformed(evt);
            }
        });

        btn_back.setBackground(new java.awt.Color(0, 137, 214));
        btn_back.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        btn_back.setForeground(new java.awt.Color(255, 255, 255));
        btn_back.setText("Add Product");
        btn_back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_backActionPerformed(evt);
            }
        });

        menu_File.setText("File");

        new_MenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        new_MenuItem.setText("New");
        new_MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                new_MenuItemActionPerformed(evt);
            }
        });
        menu_File.add(new_MenuItem);

        menuItem_Open.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menuItem_Open.setText("Open");
        menuItem_Open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_OpenActionPerformed(evt);
            }
        });
        menu_File.add(menuItem_Open);

        menuItem_Save.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menuItem_Save.setText("Save");
        menu_File.add(menuItem_Save);

        menuItem_Exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_DOWN_MASK));
        menuItem_Exit.setText("Exit");
        menuItem_Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_ExitActionPerformed(evt);
            }
        });
        menu_File.add(menuItem_Exit);

        jMenuBar1.add(menu_File);

        edit_Menu.setText("Edit");

        menuItem_Redo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menuItem_Redo.setText("Redo");
        edit_Menu.add(menuItem_Redo);

        menuItem_Undo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menuItem_Undo.setText("Undo");
        edit_Menu.add(menuItem_Undo);

        menuItem_Cut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menuItem_Cut.setText("Cut");
        edit_Menu.add(menuItem_Cut);

        menuItem_Copy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menuItem_Copy.setText("Copy");
        edit_Menu.add(menuItem_Copy);

        menuItem_Paste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menuItem_Paste.setText("Paste");
        edit_Menu.add(menuItem_Paste);

        jMenuBar1.add(edit_Menu);

        menu_About.setText("About");

        menuItem_About.setText("About ");
        menuItem_About.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_AboutActionPerformed(evt);
            }
        });
        menu_About.add(menuItem_About);

        jMenuBar1.add(menu_About);

        menu_Help.setText("Help");

        menuItem_Manual.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menuItem_Manual.setText("Manual");
        menuItem_Manual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_ManualActionPerformed(evt);
            }
        });
        menu_Help.add(menuItem_Manual);

        menuItem_Faq.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menuItem_Faq.setText("FAQ");
        menuItem_Faq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_FaqActionPerformed(evt);
            }
        });
        menu_Help.add(menuItem_Faq);

        jMenuBar1.add(menu_Help);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel_Search, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panel_Table, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addComponent(btn_back, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btn_SortbyID, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addComponent(btn_SortbyPrice)
                .addGap(29, 29, 29))
            .addGroup(layout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addComponent(btn_Home, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(panel_Search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panel_Table, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btn_SortbyID, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_SortbyPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(btn_Home)
                        .addGap(15, 15, 15)
                        .addComponent(btn_back, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(36, 36, 36))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    public void method_Open() {  // custom method for open menu item
        File openFile = new File("src/utility/LaptopData.txt");
        try {
            BufferedReader bufferreader = new BufferedReader(new FileReader(openFile));
            Object[] lines = bufferreader.lines().toArray();
            objModel.setRowCount(0);

            for (int i = 0; i < lines.length; i++) {
                String line = lines[i].toString().trim();
                Object[] dataRows = line.split(",");
                objModel.addRow(dataRows);
            }
        } catch (IOException ex) {
            Logger.getLogger(InventoryGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        tableisSorted = false;
    }

    
    
    private void menuItem_OpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_OpenActionPerformed
        // TODO add your handling code here:
        method_Open(); // invoking method 

    }//GEN-LAST:event_menuItem_OpenActionPerformed

    

    private void cb_SebyBrandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_SebyBrandActionPerformed
        // TODO add your handling code here:
        String searchBrand = (String) (cb_SebyBrand.getSelectedItem());

        int count = 0;
        String valueFound = "";

        DefaultTableModel model = (DefaultTableModel) table_Inventory.getModel();
        int row = model.getRowCount();

        if (!cb_SebyBrand.getSelectedItem().equals("Select Here")) {

            for (int k = 0; k < row; k++) {
                String brand = (String) model.getValueAt(k, 1);

                if (searchBrand.equals(brand)) {
                    valueFound = valueFound + "\n" + ((model.getValueAt(k, 0)));
                    count++;
                }

            }
            if (count != 0) {

                JOptionPane.showMessageDialog(rootPane, "There are " + count + " products found for your search." + "\n Laptop ID are: \n" + valueFound, " Details Information Message", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, " Sorry! The products under this category are not registered yet.", "Availability Status", JOptionPane.INFORMATION_MESSAGE);

            }

        } else {
            JOptionPane.showMessageDialog(this, "Please choose the Brand!", "Searching Guide Message", JOptionPane.INFORMATION_MESSAGE);

        }


    }//GEN-LAST:event_cb_SebyBrandActionPerformed


    private void btn_backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_backActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        new RegisterGUI().setVisible(true);  //opens GUI for registration

    }//GEN-LAST:event_btn_backActionPerformed


    private void btn_HomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_HomeActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        new MainGUI().setVisible(true);  //opens GUI for registration

    }//GEN-LAST:event_btn_HomeActionPerformed

    private void menuItem_ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_ExitActionPerformed
        // exits the system on click
        int choice = JOptionPane.showOptionDialog(this, "Do you want to exit?", "Quit", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);
        if (choice == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }//GEN-LAST:event_menuItem_ExitActionPerformed

    private void menuItem_ManualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_ManualActionPerformed
        // opens the user manual when Manual menuitem in Help menu is clicked
        File file = new File("src/utility/UserManual.pdf");
        try {
            Desktop.getDesktop().open(file);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "File not found!","Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_menuItem_ManualActionPerformed

    private void menuItem_FaqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_FaqActionPerformed
        // opens the FAQs in the desktop when FAQ menu item in the Help menu is clicked 
        File faqFile = new File("src/utility/FAQ.pdf");
        try {
            Desktop.getDesktop().open(faqFile);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "File not found","Error Message", JOptionPane.ERROR_MESSAGE);
           Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menuItem_FaqActionPerformed

    /* when key is pressed in the text field for searching price,
       the dialog box is displayed */
    private void txt_SebyPriceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_SebyPriceKeyPressed

        char se = evt.getKeyChar();
        if (Character.isLetter(se)) {
            txt_SebyPrice.setEditable(false);
            JOptionPane.showMessageDialog(this, "Please enter the numeric values only!", "Validity Error", JOptionPane.ERROR_MESSAGE);

        } else {
            txt_SebyPrice.setEditable(true);

        }
    }//GEN-LAST:event_txt_SebyPriceKeyPressed

    /* this method removes the selected row from both the jtable and txt file,
        the value is get from the rows and column*/
    private void btn_RemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_RemoveActionPerformed

        try {
            // select the rows and delete selected row from both table and txt file        
            if (tableisSorted == true) {
                JOptionPane.showMessageDialog(rootPane, "The temporarily sorted table was viewed.\n \nPlease re-select the row to delete!", " Deletion Guide Message", JOptionPane.INFORMATION_MESSAGE);
                method_Open();
                tableisSorted = false;
                
            } else {
                DefaultTableModel model = (DefaultTableModel) table_Inventory.getModel();

                int row = table_Inventory.getSelectedRow();
                int col = table_Inventory.getColumnModel().getColumnIndex("Laptop ID");
                String LapIdTerminate = (String) table_Inventory.getModel().getValueAt(row, col);
                String lapdetails = "";
                File laptopListFile = new File("src\\utility\\laptopData.txt");

                try ( Scanner fileRead = new Scanner(laptopListFile)) {
                    while (fileRead.hasNextLine()) {
                        String detailsRow = fileRead.nextLine();
                        String[] details = detailsRow.split(",");
                        String lapID = details[0];
                        if (!lapID.equals(LapIdTerminate)) {
                            lapdetails = lapdetails + detailsRow + "\n";
                        }
                    }

                    FileWriter writer = new FileWriter("src\\utility\\laptopData.txt");
                    writer.write(lapdetails);
                    writer.close();
                    method_Open();
                    JOptionPane.showMessageDialog(rootPane, "The selected row having Laptop ID " + LapIdTerminate + " has been deleted.", "Product De-registration Message", JOptionPane.INFORMATION_MESSAGE);

                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, "Error while adding..." + e.getMessage(), "Guide Message", JOptionPane.INFORMATION_MESSAGE);
                }
            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Select row to delete!", "Guide Message", JOptionPane.INFORMATION_MESSAGE);
        }

    }//GEN-LAST:event_btn_RemoveActionPerformed


    private void cb_SebyRAMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_SebyRAMActionPerformed

        String searchRam = (String) (cb_SebyRAM.getSelectedItem());

        int memoryCount = 0;
        String ramFound = "";

        DefaultTableModel model = (DefaultTableModel) table_Inventory.getModel();
        int row = model.getRowCount();

        if (!cb_SebyRAM.getSelectedItem().equals("Select Here")) {

            for (int l = 0; l < row; l++) {
                String ram = (String) model.getValueAt(l, 8);

                if (searchRam.equals(ram)) {
                    ramFound = ramFound + "\n" + ((model.getValueAt(l, 0)));
                    memoryCount++;
                }

            }
            if (memoryCount != 0) {

                JOptionPane.showMessageDialog(rootPane, "There are " + memoryCount + " products found for your search." + "\n Laptop ID are:  \n" + ramFound, "Details Information Message", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, " Sorry! The products under this category are not registered yet.", "Availability Status", JOptionPane.INFORMATION_MESSAGE);
            }

        } else {
            JOptionPane.showMessageDialog(this, "Please choose the RAM category!", "Searching Guide Message", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_cb_SebyRAMActionPerformed

    public static void selectionSort(int arr[]) {
        //selection sort algorithm

        for (int i = 0; i < arr.length - 1; i++) {
            int minIndex = i;
            for (int j = i + 1; j < arr.length; j++) {
                if (arr[j] < arr[minIndex]) {
                    minIndex = j;//searching for lowest index  
                }
            }
            int temp = arr[minIndex];
            arr[minIndex] = arr[i];
            arr[i] = temp;
        }
    }

    /* generates the array containing price */
    public int[] generatePriceArray() {
        int[] priceArray;
        try {
            File laptopListFile = new File("src\\utility\\laptopData.txt");
            int lineCount = 0;
            try ( Scanner fileRead = new Scanner(laptopListFile)) {
                while (fileRead.hasNextLine()) {
                    String detailsRow = fileRead.nextLine();
                    lineCount++;
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error....\n Please try again!" + e.getMessage(), "Error Message", JOptionPane.ERROR_MESSAGE);
            }
            priceArray = new int[lineCount];
            try ( Scanner fileRead = new Scanner(laptopListFile)) {
                int i = 0;
                while (fileRead.hasNextLine()) {
                    String detailsRow = fileRead.nextLine();
                    String[] details = detailsRow.split(",");
                    String laptopPrice = details[10].trim();
                    double lapPrice = Double.valueOf(laptopPrice);
                    int price = (int) lapPrice;
                    priceArray[i] = price;
                    i++;
                }
                return priceArray;
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error...\nPlease try again!" + e.getMessage(), "Error Message", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error...\nPlease try again!" + e.getMessage(), "Error Message", JOptionPane.ERROR_MESSAGE);
        }
        return null;
    }

    public int binarySearch(int[] list, int low, int high, int valuePrice) {
        int mid = (low + high) / 2;
        while (low <= high) {
            if (list[mid] < valuePrice) {
                low = mid + 1;
            } else if (list[mid] == valuePrice) {
                return mid + 1;
            } else {
                high = mid - 1;
            }
            mid = (low + high) / 2;
        }
        if (low > high) {
            return -1;
        }
        return -1;
    }


    private void btn_SearchPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_SearchPriceActionPerformed
        
        // invoking method for re arranging the data as in txt file while searching

        DefaultTableModel model = (DefaultTableModel) table_Inventory.getModel();
        int row = model.getRowCount();

        try {
            if (!txt_SebyPrice.getText().isEmpty()) {

                double searchInput = Double.valueOf(txt_SebyPrice.getText());
                int priceSearchValue = (int) searchInput;

                int[] priceList = generatePriceArray();
                selectionSort(priceList);

                int low = 0; //as the initial index of a arraylist is always zero
                int high = priceList.length - 1;

                int tableIndex = binarySearch(priceList, low, high, priceSearchValue);

                if (tableIndex == -1) {
                    JOptionPane.showMessageDialog(rootPane, "Product with price " + priceSearchValue + " not found", "Availability Status", JOptionPane.INFORMATION_MESSAGE);
                } else {

                    method_Open();
                    for (int i = 0; i < row; i++) {

                        if (searchInput == Double.parseDouble((String) table_Inventory.getValueAt(i, 10))) {
                            String laptopID = (String) table_Inventory.getValueAt(i, 0);
                            String brand = (String) table_Inventory.getValueAt(i, 1);
                            String type = (String) table_Inventory.getValueAt(i, 2);
                            String modelName = (String) table_Inventory.getValueAt(i, 3);
                            String modelNum = (String) table_Inventory.getValueAt(i, 4);
                            String cpu = (String) table_Inventory.getValueAt(i, 5);
                            String gpu = (String) table_Inventory.getValueAt(i, 6);
                            String display = (String) table_Inventory.getValueAt(i, 7);
                            String memory = (String) table_Inventory.getValueAt(i, 8);
                            String storage = (String) table_Inventory.getValueAt(i, 9);
                            String price = (String) table_Inventory.getValueAt(i, 10);
                            String priceRange = (String) table_Inventory.getValueAt(i, 11);
                            String rating = (String) table_Inventory.getValueAt(i, 12);

                            JOptionPane.showMessageDialog(rootPane, "Product with price " + priceSearchValue + " is found." + "\n" + "The details are as: \n" + "\nLaptop ID: " + laptopID + "\nBrand: " + brand + "\nType: " + type + "\nModel Name: " + modelName + "\nModel Number: " + modelNum + "\nCPU: " + cpu + "\nGPU: " + gpu + "\nDisplay: " + display + "\nMemory: " + memory + "\nStorage: " + storage + "\nPrice: " + price + "\nPrice Range: " + priceRange + "\nRating: " + rating, "Details Information", JOptionPane.INFORMATION_MESSAGE);
                            break;
                        }
                    }
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Invalid Data", "Error Message", JOptionPane.ERROR_MESSAGE);
        }


    }//GEN-LAST:event_btn_SearchPriceActionPerformed

    public int[] generateLaptopIdArray() {
        int[] laptopIdArray;
        try {
            File laptopListFile = new File("src\\utility\\LaptopData.txt");
            int lineCount = 0;
            try ( Scanner fileRead = new Scanner(laptopListFile)) {
                while (fileRead.hasNextLine()) {
                    String detailsRow = fileRead.nextLine();
                    lineCount++;
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error...\nPlease try again!" + e.getMessage(), "Error Message", JOptionPane.ERROR_MESSAGE);
            }
            laptopIdArray = new int[lineCount];

            try ( Scanner fileRead = new Scanner(laptopListFile)) {
                int i = 0;
                while (fileRead.hasNextLine()) {
                    String detailsRow = fileRead.nextLine();
                    String[] details = detailsRow.split(",");
                    String lapID = details[0].trim();
                    int laptopID = Integer.valueOf(lapID);
                    laptopIdArray[i] = laptopID;
                    i++;
                }
                return laptopIdArray;
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error...\nPlease try again!" + e.getMessage(), "Error Message", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error...\nPlease try again!" + e.getMessage(), "Error Message", JOptionPane.ERROR_MESSAGE);
        }
        return null;
    }


    private void btn_SortbyIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_SortbyIDActionPerformed
       
        tableisSorted = true;
        int[] laptopList = generateLaptopIdArray();

        selectionSort(laptopList);   //calling a method using the selection sort algorithim to sort the price list

        DefaultTableModel model = (DefaultTableModel) table_Inventory.getModel();
        int rowCount = model.getRowCount();
        while (table_Inventory.getRowCount() > 0) {   //removing existing rows of the table 
            model.removeRow(0);
        }
        File laptopListFile = new File("src\\utility\\LaptopData.txt");
        ArrayList<Object[]> sortedRow = new ArrayList<>();  //creating arrylist to store sorted object arrays(rows) 
        for (int a = 0; a < rowCount; a++) {  //adding empty replaceable objects to the arraylist
            Object[] emptyObject = new Object[1];
            sortedRow.add(emptyObject);
        }

        //scanning the details txt file read the table data 
        try ( Scanner fileRead = new Scanner(laptopListFile)) {
            while (fileRead.hasNextLine()) {
                String detailsRow = fileRead.nextLine();
                String[] details = detailsRow.split(",");
                String lapID = details[0];
                String manufacturer = details[1];
                String type = details[2];
                String modelName = details[3];
                String modelNumber = details[4];
                String cpu = details[5];
                String gpu = details[6];
                String display = details[7];
                String memory = details[8];
                String storage = details[9];
                String laptopPrice = details[10];
                String priceRange = details[11];
                String laptopRating = details[12];
                int laptopID = Integer.valueOf(lapID);
                double lapPrice = Double.valueOf(laptopPrice);
                int rating = Integer.valueOf(laptopRating);
                String[] storageDetails = storage.split(" ");
                String storageSize = storageDetails[0] +" " + storageDetails[1];
                String storageType = "";
                for (int i = 2; i < storageDetails.length; i++) {
                    storageType = storageDetails[i] + " ";
                }
                
                String store = storageSize + " " + storageType;
                int x = 0;
                int price = (int) lapPrice;

                while (x < rowCount) {
                    if (laptopList[x] == laptopID) {
                        Object[] rowObj = {laptopID, manufacturer, type, modelName, modelNumber, cpu, gpu, display, memory, store, lapPrice, priceRange, rating};
                        sortedRow.set(x, rowObj);// adding the object arrays into the arraylist in a sorted manner 
                        break;
                    }
                    x++;
                }

            }

            for (int z = 0; z < sortedRow.size(); z++) {//iterating through the object arrays in the sortedArray arraylist
                Object objz[] = sortedRow.get(z);
                model.addRow(objz);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error while sorting...\n Please try again!" + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }


    }//GEN-LAST:event_btn_SortbyIDActionPerformed

    private void btn_SortbyPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_SortbyPriceActionPerformed
        // TODO add your handling code here
        tableisSorted = true;
        int[] priceList = generatePriceArray();

        selectionSort(priceList);//calling a method using the selection sort algorithim to sort the price list
        DefaultTableModel model = (DefaultTableModel) table_Inventory.getModel();

        int rowCount = model.getRowCount();
        while (table_Inventory.getRowCount() > 0) {//removing existing rows of the table 
            model.removeRow(0);
        }

        File laptopListFile = new File("src\\utility\\laptopData.txt");
        ArrayList<Object[]> sortedRow = new ArrayList<>(); //creating arrylist to store sorted object arrays(rows) 
        
        for (int a = 0; a < rowCount; a++) {             //adding empty replaceable objects to the arraylist
            Object[] emptyObject = new Object[1];
            sortedRow.add(emptyObject);
        }

        ArrayList<String> filledIndex = new ArrayList<>();
        try ( Scanner fileRead = new Scanner(laptopListFile)) {
            while (fileRead.hasNextLine()) {
                String detailsRow = fileRead.nextLine();
                String[] details = detailsRow.split(",");
                String lapID = details[0];
                String manufacturer = details[1];
                String type = details[2];
                String modelName = details[3];
                String modelNumber = details[4];
                String cpu = details[5];
                String gpu = details[6];
                String display = details[7];
                String memory = details[8];
                String storage = details[9];
                String laptopPrice = details[10];
                String priceRange = details[11];
                String laptopRating = details[12];
                int laptopID = Integer.valueOf(lapID);
                double lapPrice = Double.valueOf(laptopPrice);
                int rating = Integer.valueOf(laptopRating);
                String[] storageDetails = storage.split(" ");
                String storageSize = storageDetails[0] +" " + storageDetails[1];
                String storageType = "";
                
                for (int i = 2; i < storageDetails.length; i++) {
                    storageType = storageDetails[i] + " ";
                }
                String store = storageSize + " " + storageType;
                int x = 0;
                int price = (int) lapPrice;

                while (x < rowCount) {
                    if (priceList[x] == price) {

                        Object[] rowObj = {laptopID, manufacturer, type, modelName, modelNumber, cpu, gpu, display, memory, store, lapPrice, priceRange, rating};

                        if (!filledIndex.contains(x + "")) {
                            filledIndex.add(x + "");
                            sortedRow.set(x, rowObj); // adding the object arrays into the arraylist in a sorted manner 
                            break;

                        } else {
                            sortedRow.set(x + 1, rowObj); // adding the object arrays into the arraylist in a sorted manner 
                            x++;
                            break;
                        }
                    }
                    x++;
                }
            }

            for (int z = 0; z < sortedRow.size(); z++) { //iterating through the object arrays in the sortedArray arraylist
                Object objRow[] = sortedRow.get(z);
                model.addRow(objRow);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error while sorting... \nPlease try again!" + e.getMessage(), "Error Message", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btn_SortbyPriceActionPerformed

    private void new_MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_new_MenuItemActionPerformed
    
          this.setVisible(false);
        new InventoryGUI().setVisible(true);
    }//GEN-LAST:event_new_MenuItemActionPerformed

    private void menuItem_AboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_AboutActionPerformed
        // TODO add your handling code here:
        try{
        JOptionPane.showMessageDialog(rootPane, "Designed and Developed By: Group 1 L2C16 \n" +"Members: Abhiyan Upreti, Bajra Manandhar, Kiran Khadka, Subigyan Adhikari", "About", JOptionPane.INFORMATION_MESSAGE );
        }
        catch (Exception ex){
            JOptionPane.showMessageDialog(this, " Error...\n Please try again!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_menuItem_AboutActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InventoryGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InventoryGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InventoryGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InventoryGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InventoryGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_Home;
    private javax.swing.JButton btn_Remove;
    private javax.swing.JButton btn_SearchPrice;
    private javax.swing.JButton btn_SortbyID;
    private javax.swing.JButton btn_SortbyPrice;
    private javax.swing.JButton btn_back;
    private javax.swing.JComboBox<String> cb_SebyBrand;
    private javax.swing.JComboBox<String> cb_SebyRAM;
    private javax.swing.JMenu edit_Menu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbl_SebyBrand;
    private javax.swing.JLabel lbl_SebyPrice;
    private javax.swing.JLabel lbl_SebyRAM;
    private javax.swing.JMenuItem menuItem_About;
    private javax.swing.JMenuItem menuItem_Copy;
    private javax.swing.JMenuItem menuItem_Cut;
    private javax.swing.JMenuItem menuItem_Exit;
    private javax.swing.JMenuItem menuItem_Faq;
    private javax.swing.JMenuItem menuItem_Manual;
    private javax.swing.JMenuItem menuItem_Open;
    private javax.swing.JMenuItem menuItem_Paste;
    private javax.swing.JMenuItem menuItem_Redo;
    private javax.swing.JMenuItem menuItem_Save;
    private javax.swing.JMenuItem menuItem_Undo;
    private javax.swing.JMenu menu_About;
    private javax.swing.JMenu menu_File;
    private javax.swing.JMenu menu_Help;
    private javax.swing.JMenuItem new_MenuItem;
    private javax.swing.JPanel panel_Search;
    private javax.swing.JPanel panel_Table;
    private javax.swing.JTable table_Inventory;
    private javax.swing.JTextField txt_SebyPrice;
    // End of variables declaration//GEN-END:variables
}
